"undefined"==typeof Number.prototype.toRadians&&(Number.prototype.toRadians=function(){return this*Math.PI/180}),"undefined"==typeof Number.prototype.toDegrees&&(Number.prototype.toDegrees=function(){return 180*this/Math.PI});var INTERSECT_LNG=179.999;L.Geodesic=L.Polyline.extend({options:{color:"blue",steps:10,dash:1,wrap:!0},initialize:function(t,a){this.options=this._merge_options(this.options,a),this.datum={},this.datum.ellipsoid={a:6378137,b:6356752.3142,f:1/298.257223563},this._latlngs=this.options.dash<1?this._generate_GeodesicDashed(t):this._generate_Geodesic(t),L.Polyline.prototype.initialize.call(this,this._latlngs,this.options)},setLatLngs:function(t){this._latlngs=this.options.dash<1?this._generate_GeodesicDashed(t):this._generate_Geodesic(t),L.Polyline.prototype.setLatLngs.call(this,this._latlngs)},getStats:function(){var t,a,n={distance:0,points:0,polygons:this._latlngs.length};for(t=0;t<this._latlngs.length;t++)for(n.points+=this._latlngs[t].length,a=0;a<this._latlngs[t].length-1;a++)n.distance+=this._vincenty_inverse(this._latlngs[t][a],this._latlngs[t][a+1]).distance;return n},createCircle:function(t,a){var n,s=[],i=0,e={lat:0,lng:0,brg:0};s[i]=[];var o=this._vincenty_direct(L.latLng(t),0,a,this.options.wrap);for(e=L.latLng(o.lat,o.lng),s[i].push(e),n=1;n<=this.options.steps;){o=this._vincenty_direct(L.latLng(t),360/this.options.steps*n,a,this.options.wrap);var h=L.latLng(o.lat,o.lng);if(Math.abs(h.lng-e.lng)>180){var r=this._vincenty_inverse(e,h),l=this._intersection(e,r.initialBearing,{lat:-89,lng:h.lng-e.lng>0?-INTERSECT_LNG:INTERSECT_LNG},0);l?(s[i].push(L.latLng(l.lat,l.lng)),i++,s[i]=[],e=L.latLng(l.lat,-l.lng),s[i].push(e)):(i++,s[i]=[],s[i].push(h),e=h,n++)}else s[i].push(h),e=h,n++}this._latlngs=s,L.Polyline.prototype.setLatLngs.call(this,this._latlngs)},_generate_Geodesic:function(t){var a,n,s,i=[],e=0;for(n=0;n<t.length;n++){for(i[e]=[],s=0;s<t[n].length-1;s++){var o=this._vincenty_inverse(L.latLng(t[n][s]),L.latLng(t[n][s+1])),h=L.latLng(t[n][s]);for(i[e].push(h),a=1;a<=this.options.steps;){var r=this._vincenty_direct(L.latLng(t[n][s]),o.initialBearing,o.distance/this.options.steps*a,this.options.wrap),l=L.latLng(r.lat,r.lng);if(Math.abs(l.lng-h.lng)>180){var g=this._intersection(L.latLng(t[n][s]),o.initialBearing,{lat:-89,lng:l.lng-h.lng>0?-INTERSECT_LNG:INTERSECT_LNG},0);g?(i[e].push(L.latLng(g.lat,g.lng)),e++,i[e]=[],h=L.latLng(g.lat,-g.lng),i[e].push(h)):(e++,i[e]=[],i[e].push(l),h=l,a++)}else i[e].push(l),h=l,a++}}e++}return i},_generate_GeodesicDashed:function(t){var a,n,s,i=[],e=0;for(n=0;n<t.length;n++){for(i[e]=[],s=0;s<t[n].length-1;s++){var o=this._vincenty_inverse(L.latLng(t[n][s]),L.latLng(t[n][s+1])),h=L.latLng(t[n][s]);for(i[e].push(h),a=1;a<=this.options.steps;){var r=this._vincenty_direct(L.latLng(t[n][s]),o.initialBearing,o.distance/this.options.steps*a-o.distance/this.options.steps*(1-this.options.dash),this.options.wrap),l=L.latLng(r.lat,r.lng);if(Math.abs(l.lng-h.lng)>180){var g=this._intersection(L.latLng(t[n][s]),o.initialBearing,{lat:-89,lng:l.lng-h.lng>0?-INTERSECT_LNG:INTERSECT_LNG},0);g?(i[e].push(L.latLng(g.lat,g.lng)),e++,i[e]=[],h=L.latLng(g.lat,-g.lng),i[e].push(h)):(e++,i[e]=[],i[e].push(l),h=l,a++)}else{i[e].push(l),e++;var c=this._vincenty_direct(L.latLng(t[n][s]),o.initialBearing,o.distance/this.options.steps*a,this.options.wrap);i[e]=[],i[e].push(L.latLng(c.lat,c.lng)),a++}}}e++}return i},_vincenty_direct:function(t,a,n,s){var i,e=t.lat.toRadians(),o=t.lng.toRadians(),h=a.toRadians(),r=n,l=this.datum.ellipsoid.a,g=this.datum.ellipsoid.b,c=this.datum.ellipsoid.f,p=Math.sin(h),M=Math.cos(h),d=(1-c)*Math.tan(e),L=1/Math.sqrt(1+d*d),u=d*L,_=Math.atan2(d,M),v=L*p,f=1-v*v,y=f*(l*l-g*g)/(g*g),N=1+y/16384*(4096+y*(-768+y*(320-175*y))),I=y/1024*(256+y*(-128+y*(74-47*y))),m=r/(g*N),R=0;do{var G=Math.cos(2*_+m),P=Math.sin(m),T=Math.cos(m),b=I*P*(G+I/4*(T*(-1+2*G*G)-I/6*G*(-3+4*P*P)*(-3+4*G*G)));i=m,m=r/(g*N)+b}while(Math.abs(m-i)>1e-12&&++R);var w=u*P-L*T*M,E=Math.atan2(u*T+L*P*M,(1-c)*Math.sqrt(v*v+w*w)),D=Math.atan2(P*p,L*T-u*P*M),S=c/16*f*(4+c*(4-3*f)),B=D-(1-S)*c*v*(m+S*P*(G+S*T*(-1+2*G*G)));if(s)var C=(o+B+3*Math.PI)%(2*Math.PI)-Math.PI;else var C=o+B;var q=Math.atan2(v,-w);return{lat:E.toDegrees(),lng:C.toDegrees(),finalBearing:q.toDegrees()}},_vincenty_inverse:function(t,a){var n,s=t.lat.toRadians(),i=t.lng.toRadians(),e=a.lat.toRadians(),o=a.lng.toRadians(),h=this.datum.ellipsoid.a,r=this.datum.ellipsoid.b,l=this.datum.ellipsoid.f,g=o-i,c=(1-l)*Math.tan(s),p=1/Math.sqrt(1+c*c),M=c*p,d=(1-l)*Math.tan(e),L=1/Math.sqrt(1+d*d),u=d*L,_=g,v=0;do{var f=Math.sin(_),y=Math.cos(_),N=L*f*(L*f)+(p*u-M*L*y)*(p*u-M*L*y),I=Math.sqrt(N);if(0==I)return 0;var m=M*u+p*L*y,R=Math.atan2(I,m),G=p*L*f/I,P=1-G*G,T=m-2*M*u/P;isNaN(T)&&(T=0);var b=l/16*P*(4+l*(4-3*P));n=_,_=g+(1-b)*l*G*(R+b*I*(T+b*m*(-1+2*T*T)))}while(Math.abs(_-n)>1e-12&&++v<100);if(v>=100)return console.log("Formula failed to converge. Altering target position."),this._vincenty_inverse(t,{lat:a.lat,lng:a.lng-.01});var w=P*(h*h-r*r)/(r*r),E=1+w/16384*(4096+w*(-768+w*(320-175*w))),D=w/1024*(256+w*(-128+w*(74-47*w))),S=D*I*(T+D/4*(m*(-1+2*T*T)-D/6*T*(-3+4*I*I)*(-3+4*T*T))),B=r*E*(R-S),C=Math.atan2(L*f,p*u-M*L*y),q=Math.atan2(p*f,-M*L+p*u*y);return B=Number(B.toFixed(3)),{distance:B,initialBearing:C.toDegrees(),finalBearing:q.toDegrees()}},_intersection:function(t,a,n,s){var i=t.lat.toRadians(),e=t.lng.toRadians(),o=n.lat.toRadians(),h=n.lng.toRadians(),r=Number(a).toRadians(),l=Number(s).toRadians(),g=o-i,c=h-e,p=2*Math.asin(Math.sqrt(Math.sin(g/2)*Math.sin(g/2)+Math.cos(i)*Math.cos(o)*Math.sin(c/2)*Math.sin(c/2)));if(0==p)return null;var M=Math.acos((Math.sin(o)-Math.sin(i)*Math.cos(p))/(Math.sin(p)*Math.cos(i)));isNaN(M)&&(M=0);var d=Math.acos((Math.sin(i)-Math.sin(o)*Math.cos(p))/(Math.sin(p)*Math.cos(o)));if(Math.sin(h-e)>0)var L=M,u=2*Math.PI-d;else var L=2*Math.PI-M,u=d;var _=(r-L+Math.PI)%(2*Math.PI)-Math.PI,v=(u-l+Math.PI)%(2*Math.PI)-Math.PI;if(0==Math.sin(_)&&0==Math.sin(v))return null;if(Math.sin(_)*Math.sin(v)<0)return null;var f=Math.acos(-Math.cos(_)*Math.cos(v)+Math.sin(_)*Math.sin(v)*Math.cos(p)),y=Math.atan2(Math.sin(p)*Math.sin(_)*Math.sin(v),Math.cos(v)+Math.cos(_)*Math.cos(f)),N=Math.asin(Math.sin(i)*Math.cos(y)+Math.cos(i)*Math.sin(y)*Math.cos(r)),I=Math.atan2(Math.sin(r)*Math.sin(y)*Math.cos(i),Math.cos(y)-Math.sin(i)*Math.sin(N)),m=e+I;return m=(m+3*Math.PI)%(2*Math.PI)-Math.PI,{lat:N.toDegrees(),lng:m.toDegrees()}},_merge_options:function(t,a){var n={};for(var s in t)n[s]=t[s];for(var s in a)n[s]=a[s];return n}}),L.geodesic=function(t,a){return new L.Geodesic(t,a)},function(){var t=L.GeoJSON.geometryToLayer;L.GeoJSON.geometryToLayer=function(a,n,s,i){if(a.properties&&a.properties.geodesic){var e,o="Feature"===a.type?a.geometry:a,h=o.coordinates,r=a.properties;switch(s=s||this.coordsToLatLng,r.geodesic_steps&&(i=L.extend({steps:r.geodesic_steps},i)),r.geodesic_wrap&&(i=L.extend({wrap:r.geodesic_wrap},i)),o.type){case"LineString":return e=this.coordsToLatLngs(h,0,s),new L.Geodesic([e],i);case"MultiLineString":return e=this.coordsToLatLngs(h,1,s),new L.Geodesic(e,i);default:console.log("Not yet supported drawing GeoJSON "+o.type+" as a geodesic: Drawing as non-geodesic.")}}return t.apply(this,arguments)}}();
